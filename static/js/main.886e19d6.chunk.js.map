{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","movies","setMovies","nominations","setNominations","showMaxNomMsg","setShowMaxNomMsg","showCongratulationMsg","setShowCongratulationMsg","useEffect","localStorage","getItem","JSON","parse","isNominated","movie","some","nomination","imdbID","className","Modal","open","onClose","Card","TextField","variant","value","fullWidth","onKeyPress","ev","key","fetch","process","then","res","json","data","Search","onChange","e","target","label","List","style","maxHeight","overflow","map","ListItem","alt","Title","src","Poster","ListItemText","id","primary","secondary","Year","Button","color","disabled","onClick","length","newNomArray","concat","setItem","stringify","addNomination","filter","removeNomination","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.886e19d6.chunk.js","sourcesContent":["import './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\n\n\nfunction App() {\n  //States\n  const [name, setName] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [nominations, setNominations] = useState([])\n  const [showMaxNomMsg, setShowMaxNomMsg] = useState(false);\n  const [showCongratulationMsg, setShowCongratulationMsg] = useState(false);\n\n  //Load API key\n  const omdb_key = process.env.REACT_APP_OMDB_API_KEY\n  //Load previous nominations\n  useEffect(() => {\n    if (localStorage.getItem(\"nominations\")) {\n      setNominations(JSON.parse(localStorage.getItem(\"nominations\")));\n    }\n  }, [])\n  const setSearchName = (e) => {\n    setName(e.target.value)\n  }\n  //Database searching page 1\n  const searchDatabase = () => {\n    fetch(`http://www.omdbapi.com/?s=${name}&apikey=${omdb_key}&type=movie`)\n      .then(res => res.json())\n      .then(data => {\n        setMovies(data.Search)\n      })\n  }\n  const handleSearchSubmit = (ev) => {\n    if (ev.key === \"Enter\") {\n      searchDatabase();\n    }\n  }\n\n  const addNomination = (movie) => {\n    if (isNominated(movie)) {\n      //Dont add if already nominated\n      return;\n    }\n    if (nominations.length === 4) {\n      //User is about to add their last nomination\n      setShowCongratulationMsg(true)\n    }\n    if (nominations.length === 5) {\n      //If already nominated 5 movies\n      setShowMaxNomMsg(true)\n      return;\n    }\n    //push to array\n    let newNomArray = nominations.concat(movie);\n    setNominations(newNomArray);\n    localStorage.setItem(\"nominations\", JSON.stringify(newNomArray))\n  }\n\n  const removeNomination = (movie) => {\n    let newNomArray = nominations.filter((nomination) => {\n      return nomination !== movie;\n    })\n    setNominations(newNomArray)\n    localStorage.setItem(\"nominations\", JSON.stringify(newNomArray))\n  }\n\n  const isNominated = (movie) => {\n    return nominations.some((nomination) => {\n      return nomination.imdbID === movie.imdbID\n    })\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Modal className=\"max-nom-modal\" open={showCongratulationMsg} onClose={() => setShowCongratulationMsg(false)}>\n          <Card>\n            <h2 className=\"max-nom-text\">Congratulations! You have nominated 5! Movies</h2>\n          </Card>\n        </Modal>\n        <Modal className=\"max-nom-modal\" open={showMaxNomMsg} onClose={() => setShowMaxNomMsg(false)}>\n          <Card>\n            <h2 className=\"max-nom-text\">You cannot add more than 5 nominations :c</h2>\n          </Card>\n        </Modal>\n        <h2 className=\"title\">\n          The Shoppies!\n          </h2>\n        <div className=\"search\">\n          <Card className=\"card\">\n            <h3>\n              Movie Title\n          </h3>\n            <TextField variant=\"outlined\" value={name} fullWidth={true} onKeyPress={handleSearchSubmit} onChange={setSearchName} label=\"Movie Name\" />\n          </Card>\n        </div>\n        <div className=\"actions-area\">\n          <div className=\"action-left\">\n            <Card className=\"card\">\n              <div className=\"movie-list\">\n                <h3>Search Results for \"{name}\"</h3>\n                <List style={{ maxHeight: '500px', overflow: 'auto' }}>\n                  {movies && movies.map((movie) => {\n                    return (\n                      <ListItem key={movie.imdbID}>\n                        <img alt={movie.Title} src={movie.Poster} />\n                        <ListItemText id=\"movie-name\" primary={movie.Title} secondary={movie.Year}></ListItemText>\n                        <Button color=\"primary\" disabled={isNominated(movie)} onClick={() => addNomination(movie)}>Nominate</Button>\n                      </ListItem>\n                    )\n                  })}\n                </List>\n              </div>\n            </Card>\n          </div>\n          <div className=\"action-right\">\n            <Card className=\"card\">\n              <h3>My Nominations (Up to 5 Nominations)</h3>\n              <div className=\"nomination-list\">\n                <List style={{ maxHeight: '500px', overflow: 'auto' }}>\n                  {nominations && nominations.map((nomination) => {\n                    return (\n                      <ListItem key={nomination.imdbID}>\n                        <img alt={nomination.Title} src={nomination.Poster} />\n                        <ListItemText id=\"movie-name\" primary={nomination.Title} secondary={nomination.Year}></ListItemText>\n                        <Button color=\"secondary\" onClick={() => removeNomination(nomination)}>Unnominate</Button>\n                      </ListItem>\n                    )\n                  })}\n                </List>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}